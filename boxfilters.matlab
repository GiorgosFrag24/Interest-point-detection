function [Lxx,Lyy,Lxy] = boxfilters(I,sigma)

%% 2.5.1 Integral Image
close all;
I_int = cumsum(cumsum(I,1),2);                                              % calculate integral image
info = size(I);

%% 2.5.2 Box filters
% Dimensions of box filters
n = 2*ceil(3*sigma)+1;
dh = 2*floor(n/6)+1;                                                        %box height                                
dw = 4*floor(n/6)+1;                                                        %box width
I_temp = padarray(I_int,[3*dw,3*dw],'replicate');                           %add enough padding to all directions
itemp = size(I_temp);

% Initialize the matrices to the size of the padded integral image (this
% will be rectified in the end)
Lxx = zeros(itemp(1),itemp(2));                                             %initialize the arrays to coordinate
Lyy = zeros(itemp(1),itemp(2));                                             %with the padded image's dimensions
Lxy = zeros(itemp(1),itemp(2));

% Construct Lxx
Lxx = Lxx + circshift(I_temp,[floor(-(3*dw-1)/2),floor(-(dh-1)/2)]) + ...
    circshift(I_temp,[floor(-(dw+1)/2),floor((dh-1)/2)]) - ...
    circshift(I_temp,[floor(-(3*dw-1)/2),floor((dh-1)/2)]) - ...
    circshift(I_temp,[floor(-(dw+1)/2),floor(-(dh-1)/2)]);
Lxx = Lxx - 2*circshift(I_temp,[floor(-(dw-1)/2),floor(-(dh-1)/2)]) - ...
    2*circshift(I_temp,[floor((dw-1)/2),floor((dh-1)/2)]) + ...
    2*circshift(I_temp,[floor(-(dw-1)/2),floor((dh-1)/2)]) + ...
    2*circshift(I_temp,[floor((dw-1)/2),floor(-(dh-1)/2)]);
Lxx = Lxx + circshift(I_temp,[floor((dw+1)/2),floor(-(dh-1)/2)]) + ...
    circshift(I_temp,[floor((3*dw-1)/2),floor((dh-1)/2)]) - ...
    circshift(I_temp,[floor((dw+1)/2),floor((dh-1)/2)]) - ...
    circshift(I_temp,[floor((3*dw-1)/2),floor(-(dh-1)/2)]);
Lxx = Lxx((3*dw+1):(3*dw+info(1)),(3*dw+1):(3*dw+info(2)));

% Construct Lyy
[dh,dw] = deal(dw,dh);
Lyy = Lyy + circshift(I_temp,[floor(-(dw-1)/2),floor(-(3*dh-1)/2)]) + ...
    circshift(I_temp,[floor((dw-1)/2),floor(-(dh+1)/2)]) - ...
    circshift(I_temp,[floor((dw-1)/2),floor(-(3*dh-1)/2)]) - ...
    circshift(I_temp,[floor(-(dw-1)/2),floor(-(dh+1)/2)]);
Lyy = Lyy - 2*circshift(I_temp,[floor(-(dw-1)/2),floor(-(dh-1)/2)]) - ...
    2*circshift(I_temp,[floor((dw-1)/2),floor((dh-1)/2)]) + ...
    2*circshift(I_temp,[floor((dw-1)/2),floor(-(dh-1)/2)]) + ...
    2*circshift(I_temp,[floor(-(dw-1)/2),floor((dh-1)/2)]);
Lyy = Lyy + circshift(I_temp,[floor(-(dw-1)/2),floor((dh+1)/2)]) + ...
    circshift(I_temp,[floor((dw-1)/2),floor((3*dh-1)/2)]) - ...
    circshift(I_temp,[floor((dw-1)/2),floor((dh+1)/2)]) - ...
    circshift(I_temp,[floor(-(dw-1)/2),floor((3*dh-1)/2)]);
[dh,dw] = deal(dw,dh);
Lyy = Lyy((3*dw+1):(3*dw+info(1)),(3*dw+1):(3*dw+info(2)));


% Construct Lxy
d = dh;
Lxy = Lxy + circshift(I_temp,[-d-1,-d-1]) + circshift(I_temp,[-1,-1]) - ...
    circshift(I_temp,[-d-1,-1]) - circshift(I_temp,[-1,-d-1]);
Lxy = Lxy - circshift(I_temp,[1,-d-1]) - circshift(I_temp,[d+1,-1]) + ...
    circshift(I_temp,[1,-1]) + circshift(I_temp,[d+1,-d-1]);
Lxy = Lxy - circshift(I_temp,[-d-1,1]) - circshift(I_temp,[-1,d+1]) + ...
    circshift(I_temp,[-d-1,d+1]) + circshift(I_temp,[-1,1]);
Lxy = Lxy + circshift(I_temp,[1,1]) + circshift(I_temp,[d+1,d+1]) - ...
    circshift(I_temp,[d+1,1]) - circshift(I_temp,[1,d+1]);
Lxy = Lxy((3*dw+1):(3*dw+info(1)),(3*dw+1):(3*dw+info(2)));

end

